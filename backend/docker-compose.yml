version: "3.8"

services:
  # Service Registry (Eureka Server)
  service-registry:
    build:
      context: ./service-registry
      dockerfile: Dockerfile
    container_name: service-registry-container
    restart: always
    ports:
      - "8761:8761"

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway-container
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - service-registry
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - EUREKA_INSTANCE_HOSTNAME=api-gateway

  # MySQL Database for `account-service`
  mysql:
    image: mysql:8
    container_name: mysql-container
    restart: always
    env_file:
      - ./account-service/.env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: account_db
      MYSQL_USER: ${DB_MYSQL_USERNAME}
      MYSQL_PASSWORD: ${DB_MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./account-service/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Account Service
  account-service:
    build:
      context: ./account-service
      dockerfile: Dockerfile
    container_name: account-service-container
    restart: always
    ports:
      - "8081:8080"
    depends_on:
      - service-registry
      - api-gateway
      - mysql
    env_file:
      - ./account-service/.env

  # MongoDB Database for `order-service`
  mongo:
    image: mongo:7.0.8
    container_name: mongo-item-service
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_DATABASE: ecommerce-microservices-item-service

  # Item Service
  item-service:
    build:
      context: ./item-service
      dockerfile: Dockerfile
    container_name: item-service-container
    restart: always
    ports:
      - "8082:8080"
    depends_on:
      - service-registry
      - api-gateway
      - mongo
    env_file:
      - ./item-service/.env
    environment:
      MONGODB_URI: ${MONGODB_URI}

  cassandra:
    image: cassandra:4.0
    container_name: cassandra
    ports:
      - "9042:9042"
    volumes:
      - ./docker-data/cassandra:/var/lib/cassandra
      - ./create-keyspace.cql:/docker-entrypoint-initdb.d/create-keyspace.cql
    environment:
      - MAX_HEAP_SIZE=256M
      - HEAP_NEWSIZE=128M
      - CASSANDRA_CLUSTER_NAME=MyCluster

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - ./docker-data/kafka:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kilo-doc-rest-kafka:29092

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service-container
    restart: always
    ports:
      - "8083:8080"
    depends_on:
      - service-registry
      - api-gateway
      - cassandra
      - zookeeper
      - kafka

  # MySQL Database for `payment-service`
  mysql-payment:
    image: mysql:8
    container_name: mysql-payment-container
    restart: always
    env_file:
      - ./payment-service/.env
    environment:
      MYSQL_ROOT_PASSWORD: rootroot  # ${DB_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: payment_db
      MYSQL_USER: user1 # ${DB_MYSQL_USERNAME}
      MYSQL_PASSWORD: pass1 # ${DB_MYSQL_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  # Payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service-container
    restart: always
    depends_on:
      - service-registry
      - api-gateway
      - mysql-payment
      - zookeeper
      - kafka
    ports:
      - "8084:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-payment:3306/payment_db
      SPRING_DATASOURCE_USERNAME: user1
      SPRING_DATASOURCE_PASSWORD: pass1
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

volumes:
  mysql_data:
  mongo_data:
  mysql_data_payment:


